package com.base.code.template.controller;

import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.base.condition.*;
import com.base.controller.BaseController;
import com.base.json.JsonMessage;
import com.base.util.I18nUtil;
import com.base.util.JsonUtil;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.*;

@SuppressWarnings(value = "unchecked")
@RestController
@RequestMapping("/api/${lowerModuleName}")
public class ${upperModuleName}Controller extends BaseController {

    @Autowired
    private ${upperModuleName}Service ${lowerModuleName}Service;



    /**
     * 查询用户列表
     * @param username
     * @param pageNum
     * @param pageSize
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    @ApiOperation(value="查询所有用户",notes = "查询所有用户")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id",value = "主键", dataType = "Long",paramType = "query"),
            @ApiImplicitParam(name = "username",value = "用户名", dataType = "String",paramType = "query"),
            @ApiImplicitParam(name = "orgName",value = "机构名称", dataType = "String",paramType = "query"),
            @ApiImplicitParam(name = "pageNum",value = "当前页数(分页参数)",dataType = "int",paramType = "query"),
            @ApiImplicitParam(name = "pageSize",value = "每页显示记录数(分页参数)",dataType = "int",paramType = "query")
    })
    @ApiResponses(value={@ApiResponse(code=200,message = "所有用户列表")})
    public JsonMessage<String> list(
            @RequestParam(value = "id",required = false) Long id,
            @RequestParam(value = "username",required = false) String username,
            @RequestParam(value = "orgName",required = false) String orgName,
            @RequestParam(value = "pageNum",defaultValue = "1")Integer pageNum,
            @RequestParam(value = "pageSize",defaultValue = "20") Integer pageSize){
        SimplePropertyPreFilter [] filters=JsonUtil.getOneDeepJsonFilter(UserBean.class);
        BaseCondition condition= BaseCondition.and(
                new NumberCondition("id",id, NumberCondition.Handler.EQUAL),
                new StringCondition("username",username, StringCondition.Handler.ALL_LIKE),
                new StringCondition("org.name",orgName, StringCondition.Handler.ALL_LIKE)
        );
        if(pageNum==null||pageSize==null){
            return JsonMessage.successed(JsonUtil.toDefaultJSONString(userService.findAll(condition),filters));
        }else{
            return JsonMessage.successed(JsonUtil.toDefaultJSONString(userService.findAll(condition,new PageRequest(pageNum-1,pageSize)),filters));
        }

    }

    /**
     * 保存用户
     * @param user
     * @return
     */
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    @ApiOperation(value = "保存用户",notes = "保存用户")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "user",value = "用户实体",dataType = "SysUserDTO",paramType = "body"),
    })
    @ApiResponses(value = {@ApiResponse(code = 200,message = "保存用户")})
    public JsonMessage<String> save(@RequestBody UserBean user){
        //如果为新增操作、则赋予初始密码
        if(user.getId()==null){
            user.setPassword(new Md5Hash(initialPassword,user.getUsername()).toBase64());
        }
        userService.saveIngoreNull(user);
        return JsonMessage.successed(null,I18nUtil.getMessage("COMMON.SAVE_SUCCESSED"));
    }


    /**
     * 删除用户
     * @param userIdArr
     * @return
     */
    @RequestMapping(value = "/delete",method = RequestMethod.DELETE)
    @ApiOperation(value = "删除用户",notes = "删除用户")
    @ApiImplicitParam(name = "userIdArr",value = "用户id数组",paramType = "query")
    @ApiResponses(value = {@ApiResponse(code = 200,message = "删除用户")})
    public JsonMessage<String> delete(@RequestParam Long[] userIdArr){
        userService.delete(userIdArr);
        return JsonMessage.successed(null,I18nUtil.getMessage("COMMON.DELETE_SUCCESSED"));
    }

    /**
     * 字段唯一性验证
     * @param fieldName
     * @param val
     * @return
     */
    @RequestMapping(value = "/isUniqueCheck",method = RequestMethod.GET)
    @ApiOperation(value = "字段唯一性验证",notes = "字段唯一性验证")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "fieldName",value = "字段名称",dataType = "String",paramType = "query"),
            @ApiImplicitParam(name = "fieldValue",value = "字段的值",dataType = "String",paramType = "query")
    })
    @ApiResponses(value = {@ApiResponse(code = 200,message = "true(可用) false(不可用)")})
    public JsonMessage<Object> isUniqueCheck(
            @RequestParam(value = "fieldName",required = true) String fieldName,
            @RequestParam(value = "fieldValue",required = true) String val){
        boolean flag = userService.isUnique(fieldName, val);
        if (flag==false){
            return JsonMessage.failed(I18nUtil.getMessage("IsAvailable_FALSE"));
        }else {
            return JsonMessage.successed(null);
        }
    }

}
